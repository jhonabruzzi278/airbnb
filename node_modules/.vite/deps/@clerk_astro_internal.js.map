{
  "version": 3,
  "sources": ["../../@clerk/astro/node_modules/nanoid/url-alphabet/index.js", "../../@clerk/astro/node_modules/nanoid/index.browser.js", "../../@clerk/astro/src/internal/merge-env-vars-with-params.ts", "../../@clerk/astro/src/internal/create-injection-script-runner.ts", "../../@clerk/astro/src/internal/utils/generateSafeId.ts", "../../@clerk/astro/src/internal/swap-document.ts", "../../@clerk/astro/src/internal/index.ts"],
  "sourcesContent": ["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n", "import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step | 0\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size | 0, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n", "import { isTruthy } from '@clerk/shared/underscore';\n\nimport type { AstroClerkIntegrationParams } from '../types';\n\n/**\n * @internal\n */\nconst mergeEnvVarsWithParams = (params?: AstroClerkIntegrationParams & { publishableKey?: string }) => {\n  const {\n    signInUrl: paramSignIn,\n    signUpUrl: paramSignUp,\n    isSatellite: paramSatellite,\n    proxyUrl: paramProxy,\n    domain: paramDomain,\n    publishableKey: paramPublishableKey,\n    telemetry: paramTelemetry,\n    ...rest\n  } = params || {};\n\n  return {\n    signInUrl: paramSignIn || import.meta.env.PUBLIC_CLERK_SIGN_IN_URL,\n    signUpUrl: paramSignUp || import.meta.env.PUBLIC_CLERK_SIGN_UP_URL,\n    isSatellite: paramSatellite || import.meta.env.PUBLIC_CLERK_IS_SATELLITE,\n    proxyUrl: paramProxy || import.meta.env.PUBLIC_CLERK_PROXY_URL,\n    domain: paramDomain || import.meta.env.PUBLIC_CLERK_DOMAIN,\n    publishableKey: paramPublishableKey || import.meta.env.PUBLIC_CLERK_PUBLISHABLE_KEY || '',\n    telemetry: paramTelemetry || {\n      disabled: isTruthy(import.meta.env.PUBLIC_CLERK_TELEMETRY_DISABLED),\n      debug: isTruthy(import.meta.env.PUBLIC_CLERK_TELEMETRY_DEBUG),\n    },\n    ...rest,\n  };\n};\n\nexport { mergeEnvVarsWithParams };\n", "import { $initialState } from '../stores/internal';\nimport type { AstroClerkIntegrationParams } from '../types';\nimport { mergeEnvVarsWithParams } from './merge-env-vars-with-params';\nimport type { CreateClerkInstanceInternalFn } from './types';\n\n/**\n * @internal\n * Before initializing Clerk do:\n * 1) Populate stores with the authentication state during SSR.\n * 2) Merge the environment variables from the server context with the ones from the integration.\n */\nfunction createInjectionScriptRunner(creator: CreateClerkInstanceInternalFn) {\n  async function runner(astroClerkOptions?: AstroClerkIntegrationParams) {\n    const ssrDataContainer = document.getElementById('__CLERK_ASTRO_DATA__');\n    if (ssrDataContainer) {\n      $initialState.set(JSON.parse(ssrDataContainer.textContent || '{}'));\n    }\n\n    const clientSafeVarsContainer = document.getElementById('__CLERK_ASTRO_SAFE_VARS__');\n    let clientSafeVars = {};\n    if (clientSafeVarsContainer) {\n      clientSafeVars = JSON.parse(clientSafeVarsContainer.textContent || '{}');\n    }\n\n    await creator(mergeEnvVarsWithParams({ ...astroClerkOptions, ...clientSafeVars }));\n  }\n\n  return runner;\n}\n\nexport { createInjectionScriptRunner };\n", "import { customAlphabet, urlAlphabet } from 'nanoid';\n\n/**\n * Generates a safe, URL-friendly unique identifier.\n *\n * @example\n * const id = generateSafeId();\n * console.log(id); // Outputs something like: \"f3x2P9Xn1K\"\n */\nexport const generateSafeId = (defaultSize = 10) => customAlphabet(urlAlphabet, defaultSize)();\n", "const PERSIST_ATTR = 'data-astro-transition-persist';\nconst EMOTION_ATTR = 'data-emotion';\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype SwapFunctions = typeof import('astro:transitions/client').swapFunctions;\n\n/**\n * @internal\n * Custom swap function to make mounting and styling\n * of Clerk components work with View Transitions in Astro.\n *\n * See https://docs.astro.build/en/guides/view-transitions/#building-a-custom-swap-function\n */\nexport function swapDocument(swapFunctions: SwapFunctions, doc: Document) {\n  swapFunctions.deselectScripts(doc);\n  swapFunctions.swapRootAttributes(doc);\n\n  // Keep the elements created by `@emotion/cache`\n  const emotionElements = document.querySelectorAll(`style[${EMOTION_ATTR}]`);\n  swapHeadElements(doc, Array.from(emotionElements));\n\n  const restoreFocusFunction = swapFunctions.saveFocus();\n  swapFunctions.swapBodyElement(doc.body, document.body);\n  restoreFocusFunction();\n}\n\n/**\n * This function is a copy of the original `swapHeadElements` function from `astro:transitions/client`.\n * The difference is that you can pass a list of elements that should not be removed\n * in the new document.\n *\n * See https://github.com/withastro/astro/blob/d6f17044d3873df77cfbc73230cb3194b5a7d82a/packages/astro/src/transitions/swap-functions.ts#L51\n */\nfunction swapHeadElements(doc: Document, ignoredElements: Element[]) {\n  for (const el of Array.from(document.head.children)) {\n    const newEl = persistedHeadElement(el, doc);\n\n    if (newEl) {\n      newEl.remove();\n    } else {\n      if (!ignoredElements.includes(el)) {\n        el.remove();\n      }\n    }\n  }\n\n  document.head.append(...doc.head.children);\n}\n\nfunction persistedHeadElement(el: Element, newDoc: Document) {\n  const id = el.getAttribute(PERSIST_ATTR);\n  const newEl = id && newDoc.head.querySelector(`[${PERSIST_ATTR}=\"${id}\"]`);\n  if (newEl) {\n    return newEl;\n  }\n  if (el.matches('link[rel=stylesheet]')) {\n    const href = el.getAttribute('href');\n    return newDoc.head.querySelector(`link[rel=stylesheet][href=\"${href}\"]`);\n  }\n  return null;\n}\n", "/**\n * The following code will be used in order to be injected as script via the astro integration.\n * F.e.\n *\n * injectScript('before-hydration', `...`)\n */\n\nimport { createClerkInstance } from './create-clerk-instance';\nimport { createInjectionScriptRunner } from './create-injection-script-runner';\n\nconst runInjectionScript = createInjectionScriptRunner(createClerkInstance);\n\nexport { runInjectionScript };\n\nexport { generateSafeId } from './utils/generateSafeId';\nexport { swapDocument } from './swap-document';\n"],
  "mappings": "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",
  "names": []
}
