import {
  $initialState,
  createClerkInstance,
  isTruthy
} from "./chunk-A7Z4PQPD.js";
import "./chunk-BUSYA2B4.js";

// node_modules/@clerk/astro/node_modules/nanoid/url-alphabet/index.js
var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";

// node_modules/@clerk/astro/node_modules/nanoid/index.browser.js
var random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
var customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << Math.log2(alphabet.length - 1)) - 1;
  let step = -~(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    let id = "";
    while (true) {
      let bytes = getRandom(step);
      let j = step | 0;
      while (j--) {
        id += alphabet[bytes[j] & mask] || "";
        if (id.length >= size) return id;
      }
    }
  };
};
var customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size | 0, random);

// node_modules/@clerk/astro/dist/internal/index.js
var mergeEnvVarsWithParams = (params) => {
  const {
    signInUrl: paramSignIn,
    signUpUrl: paramSignUp,
    isSatellite: paramSatellite,
    proxyUrl: paramProxy,
    domain: paramDomain,
    publishableKey: paramPublishableKey,
    telemetry: paramTelemetry,
    ...rest
  } = params || {};
  return {
    signInUrl: paramSignIn || import.meta.env.PUBLIC_CLERK_SIGN_IN_URL,
    signUpUrl: paramSignUp || import.meta.env.PUBLIC_CLERK_SIGN_UP_URL,
    isSatellite: paramSatellite || import.meta.env.PUBLIC_CLERK_IS_SATELLITE,
    proxyUrl: paramProxy || import.meta.env.PUBLIC_CLERK_PROXY_URL,
    domain: paramDomain || import.meta.env.PUBLIC_CLERK_DOMAIN,
    publishableKey: paramPublishableKey || import.meta.env.PUBLIC_CLERK_PUBLISHABLE_KEY || "",
    telemetry: paramTelemetry || {
      disabled: isTruthy(import.meta.env.PUBLIC_CLERK_TELEMETRY_DISABLED),
      debug: isTruthy(import.meta.env.PUBLIC_CLERK_TELEMETRY_DEBUG)
    },
    ...rest
  };
};
function createInjectionScriptRunner(creator) {
  async function runner(astroClerkOptions) {
    const ssrDataContainer = document.getElementById("__CLERK_ASTRO_DATA__");
    if (ssrDataContainer) {
      $initialState.set(JSON.parse(ssrDataContainer.textContent || "{}"));
    }
    const clientSafeVarsContainer = document.getElementById("__CLERK_ASTRO_SAFE_VARS__");
    let clientSafeVars = {};
    if (clientSafeVarsContainer) {
      clientSafeVars = JSON.parse(clientSafeVarsContainer.textContent || "{}");
    }
    await creator(mergeEnvVarsWithParams({ ...astroClerkOptions, ...clientSafeVars }));
  }
  return runner;
}
var generateSafeId = (defaultSize = 10) => customAlphabet(urlAlphabet, defaultSize)();
var PERSIST_ATTR = "data-astro-transition-persist";
var EMOTION_ATTR = "data-emotion";
function swapDocument(swapFunctions, doc) {
  swapFunctions.deselectScripts(doc);
  swapFunctions.swapRootAttributes(doc);
  const emotionElements = document.querySelectorAll(`style[${EMOTION_ATTR}]`);
  swapHeadElements(doc, Array.from(emotionElements));
  const restoreFocusFunction = swapFunctions.saveFocus();
  swapFunctions.swapBodyElement(doc.body, document.body);
  restoreFocusFunction();
}
function swapHeadElements(doc, ignoredElements) {
  for (const el of Array.from(document.head.children)) {
    const newEl = persistedHeadElement(el, doc);
    if (newEl) {
      newEl.remove();
    } else {
      if (!ignoredElements.includes(el)) {
        el.remove();
      }
    }
  }
  document.head.append(...doc.head.children);
}
function persistedHeadElement(el, newDoc) {
  const id = el.getAttribute(PERSIST_ATTR);
  const newEl = id && newDoc.head.querySelector(`[${PERSIST_ATTR}="${id}"]`);
  if (newEl) {
    return newEl;
  }
  if (el.matches("link[rel=stylesheet]")) {
    const href = el.getAttribute("href");
    return newDoc.head.querySelector(`link[rel=stylesheet][href="${href}"]`);
  }
  return null;
}
var runInjectionScript = createInjectionScriptRunner(createClerkInstance);
export {
  generateSafeId,
  runInjectionScript,
  swapDocument
};
//# sourceMappingURL=@clerk_astro_internal.js.map
