---
// filepath: src/pages/listings/index.astro
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import Hero from "../../components/Hero.astro";
import ListingCard from "../../components/ListingCard.astro";
import { getCollection } from "astro:content";
import { categories } from "../../data/categories.js";

const allRentals = await getCollection("rentals");

// Obtener estadÃ­sticas
const totalProperties = allRentals.length;
const avgPrice = Math.round(allRentals.reduce((sum, rental) => sum + rental.data.price_per_night, 0) / totalProperties);
const categoryCounts = categories.map(cat => ({
  ...cat,
  count: allRentals.filter(rental => rental.data.category === cat.link).length
}));

// Ordenar por precio (default)
const sortedRentals = allRentals.sort((a, b) => a.data.price_per_night - b.data.price_per_night);
---

<DefaultLayout title="All Properties - Find Your Perfect Stay">
  <Hero />
  
  <!-- Header Section -->
  <div class="bg-gradient-to-br from-gray-50 via-white to-pink-50">
    <div class="mx-auto max-w-7xl px-4 lg:px-6 py-8 lg:py-12">
      <!-- Breadcrumb -->
      <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-6" aria-label="Breadcrumb">
        <a href="/" class="hover:text-pink-600 transition-colors">Home</a>
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
        </svg>
        <span class="text-gray-900 font-medium">All Properties</span>
      </nav>

      <!-- Header Principal -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6 mb-8">
        <div>
          <h1 class="text-3xl lg:text-4xl xl:text-5xl font-light text-gray-900 mb-3 tracking-tight">
            All <span class="font-normal text-pink-600">Properties</span>
          </h1>
          <div class="flex flex-col sm:flex-row sm:items-center gap-4 text-gray-600">
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5 text-pink-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
              <span class="text-lg font-medium">{totalProperties} properties available</span>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"/>
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z" clip-rule="evenodd"/>
              </svg>
              <span>From ${Math.min(...allRentals.map(r => r.data.price_per_night))}/night</span>
            </div>
          </div>
        </div>
        
        <!-- Quick Stats - Desktop -->
        <div class="hidden lg:flex items-center gap-6">
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-900">{totalProperties}</div>
            <div class="text-sm text-gray-500">Properties</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-900">${avgPrice}</div>
            <div class="text-sm text-gray-500">Avg/night</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-900">{categories.length}</div>
            <div class="text-sm text-gray-500">Categories</div>
          </div>
        </div>
      </div>

      <!-- Filter Pills - Mobile Scroll, Desktop Grid -->
      <div class="mb-8">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Filter by Category</h3>
        
        <!-- Mobile: Horizontal scroll -->
        <div class="lg:hidden">
          <div class="flex gap-2 overflow-x-auto pb-2 scrollbar-hide">
            <a 
              href="/listings" 
              class="flex-shrink-0 bg-pink-500 text-white px-4 py-2 rounded-full text-sm font-medium transition-colors"
            >
              All ({totalProperties})
            </a>
            {categoryCounts.map((cat) => (
              <a 
                href={`/categories/${cat.link}`} 
                class="flex-shrink-0 bg-white border border-gray-200 hover:border-pink-300 text-gray-700 hover:text-pink-600 px-4 py-2 rounded-full text-sm font-medium transition-all whitespace-nowrap"
              >
                {cat.label} ({cat.count})
              </a>
            ))}
          </div>
        </div>

        <!-- Desktop: Responsive grid -->
        <div class="hidden lg:flex flex-wrap gap-3">
          <a 
            href="/listings" 
            class="bg-pink-500 text-white px-6 py-2 rounded-full text-sm font-medium transition-colors"
          >
            All Properties ({totalProperties})
          </a>
          {categoryCounts.map((cat) => (
            <a 
              href={`/categories/${cat.link}`} 
              class="bg-white border border-gray-200 hover:border-pink-300 hover:bg-pink-50 text-gray-700 hover:text-pink-600 px-6 py-2 rounded-full text-sm font-medium transition-all"
            >
              {cat.label} ({cat.count})
            </a>
          ))}
        </div>
      </div>

      <!-- Sort Options -->
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-8 p-4 bg-white rounded-xl border border-gray-100">
        <div class="flex items-center gap-4">
          <label class="text-sm font-medium text-gray-700">Sort by:</label>
          <select 
            id="sort-select"
            class="border border-gray-200 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-pink-500 focus:border-transparent"
          >
            <option value="price-low">Price: Low to High</option>
            <option value="price-high">Price: High to Low</option>
            <option value="guests">Most Guests</option>
            <option value="bedrooms">Most Bedrooms</option>
            <option value="newest">Newest First</option>
          </select>
        </div>

        <!-- View Toggle -->
        <div class="flex items-center gap-2">
          <span class="text-sm text-gray-500">View:</span>
          <div class="flex bg-gray-100 rounded-lg p-1">
            <button 
              id="grid-view" 
              class="grid-toggle active px-3 py-1 rounded text-sm font-medium transition-colors"
            >
              Grid
            </button>
            <button 
              id="list-view" 
              class="list-toggle px-3 py-1 rounded text-sm font-medium transition-colors"
            >
              List
            </button>
          </div>
        </div>
      </div>

      <!-- Properties Grid -->
      <div id="properties-container">
        <!-- Grid View (Default) -->
        <div 
          id="grid-container" 
          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4 lg:gap-6"
        >
          {sortedRentals.map((rental) => (
            <div class="property-item" data-price={rental.data.price_per_night} data-guests={rental.data.max_guests} data-bedrooms={rental.data.bedrooms}>
              <ListingCard
                price={rental.data.price_per_night.toString()}
                image={rental.data.main_image}
                location={rental.data.location}
                slug={rental.slug}
              />
            </div>
          ))}
        </div>

        <!-- List View (Hidden by default) -->
        <div id="list-container" class="hidden space-y-4">
          {sortedRentals.map((rental) => (
            <div class="property-item-list bg-white rounded-xl border border-gray-100 overflow-hidden shadow-sm hover:shadow-lg transition-shadow" data-price={rental.data.price_per_night} data-guests={rental.data.max_guests} data-bedrooms={rental.data.bedrooms}>
              <div class="flex flex-col sm:flex-row">
                <!-- Image -->
                <div class="sm:w-80 sm:flex-shrink-0">
                  <img 
                    src={rental.data.main_image} 
                    alt={rental.data.title}
                    class="w-full h-48 sm:h-full object-cover"
                    loading="lazy"
                  />
                </div>
                
                <!-- Content -->
                <div class="flex-1 p-6">
                  <div class="flex flex-col h-full">
                    <div class="flex-1">
                      <div class="flex items-start justify-between mb-2">
                        <h3 class="text-xl font-semibold text-gray-900 hover:text-pink-600 transition-colors">
                          <a href={`/rentals/${rental.slug}`}>{rental.data.title}</a>
                        </h3>
                        <div class="text-right">
                          <div class="text-2xl font-bold text-gray-900">${rental.data.price_per_night}</div>
                          <div class="text-sm text-gray-500">/night</div>
                        </div>
                      </div>
                      
                      <div class="flex items-center gap-1 text-gray-600 mb-3">
                        <svg class="w-4 h-4 text-pink-500" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="text-sm">{rental.data.location}</span>
                      </div>

                      <div class="flex items-center gap-6 text-sm text-gray-500 mb-4">
                        <span class="flex items-center gap-1">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                          </svg>
                          {rental.data.bedrooms} bed{rental.data.bedrooms !== 1 ? 's' : ''}
                        </span>
                        <span class="flex items-center gap-1">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                          </svg>
                          {rental.data.max_guests} guest{rental.data.max_guests !== 1 ? 's' : ''}
                        </span>
                        <span class="flex items-center gap-1">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z"></path>
                          </svg>
                          {rental.data.bathrooms} bath{rental.data.bathrooms !== 1 ? 's' : ''}
                        </span>
                      </div>

                      <!-- Amenities preview -->
                      <div class="flex flex-wrap gap-1 mb-4">
                        {rental.data.amenities.slice(0, 3).map((amenity) => (
                          <span class="bg-gray-100 text-gray-600 px-2 py-1 rounded text-xs">
                            {amenity}
                          </span>
                        ))}
                        {rental.data.amenities.length > 3 && (
                          <span class="text-gray-500 text-xs">
                            +{rental.data.amenities.length - 3} more
                          </span>
                        )}
                      </div>
                    </div>

                    <!-- Actions -->
                    <div class="flex items-center justify-between pt-4 border-t border-gray-100">
                      <div class="flex items-center gap-1">
                        {[...Array(5)].map((_, i) => (
                          <svg class="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                          </svg>
                        ))}
                        <span class="text-sm text-gray-500 ml-1">4.8 (24 reviews)</span>
                      </div>
                      
                      <a 
                        href={`/rentals/${rental.slug}`}
                        class="bg-gradient-to-r from-pink-500 to-pink-600 hover:from-pink-600 hover:to-pink-700 text-white py-2 px-6 rounded-lg font-medium transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg"
                      >
                        View Details
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Load More Button -->
      <div class="text-center mt-12">
        <button 
          id="load-more"
          class="bg-white border border-gray-200 hover:border-pink-300 hover:bg-pink-50 text-gray-700 hover:text-pink-600 px-8 py-3 rounded-full font-medium transition-all duration-300"
        >
          Load More Properties
        </button>
      </div>
    </div>
  </div>
</DefaultLayout>

<script>
  // Sort functionality
  const sortSelect = document.getElementById('sort-select');
  const gridContainer = document.getElementById('grid-container');
  const listContainer = document.getElementById('list-container');
  const gridToggle = document.getElementById('grid-view');
  const listToggle = document.getElementById('list-view');

  // View toggle
  gridToggle?.addEventListener('click', () => {
    gridContainer?.classList.remove('hidden');
    listContainer?.classList.add('hidden');
    gridToggle.classList.add('active');
    listToggle?.classList.remove('active');
  });

  listToggle?.addEventListener('click', () => {
    gridContainer?.classList.add('hidden');
    listContainer?.classList.remove('hidden');
    listToggle.classList.add('active');
    gridToggle?.classList.remove('active');
  });

  // Sort functionality
  sortSelect?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    if (!target) return;
    const sortValue = target.value;
    const gridItems = Array.from(gridContainer?.querySelectorAll('.property-item') || []);
    const listItems = Array.from(listContainer?.querySelectorAll('.property-item-list') || []);

    const sortFunction = (a: Element, b: Element) => {
      const aElement = a as HTMLElement;
      const bElement = b as HTMLElement;
      
      switch (sortValue) {
        case 'price-low':
          return parseInt(aElement.dataset.price || '0') - parseInt(bElement.dataset.price || '0');
        case 'price-high':
          return parseInt(bElement.dataset.price || '0') - parseInt(aElement.dataset.price || '0');
        case 'guests':
          return parseInt(bElement.dataset.guests || '0') - parseInt(aElement.dataset.guests || '0');
        case 'bedrooms':
          return parseInt(bElement.dataset.bedrooms || '0') - parseInt(aElement.dataset.bedrooms || '0');
        default:
          return 0;
      }
    };

    // Sort grid items
    gridItems.sort(sortFunction);
    gridItems.forEach(item => gridContainer?.appendChild(item));

    // Sort list items
    listItems.sort(sortFunction);
    listItems.forEach(item => listContainer?.appendChild(item));
  });

  // Load more functionality (placeholder)
  document.getElementById('load-more')?.addEventListener('click', () => {
    // Implement pagination logic here
    console.log('Load more properties...');
  });
</script>

<style>
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  .grid-toggle.active,
  .list-toggle.active {
    background-color: white;
    color: #ec4899;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .grid-toggle,
  .list-toggle {
    color: #6b7280;
  }

  @media (max-width: 768px) {
    .active\:scale-95:active {
      transform: scale(0.95);
    }
  }
</style>